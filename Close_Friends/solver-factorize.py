from gmpy2 import *
from Crypto.Util.number import *

def is_safe_prime(p):
    return isPrime(p) and isPrime((p - 1) / 2)

n = 19151832364469874030079656094177469433748168317755320937083072949573978228040151291544777245502236063196608461579489201369362004815030043733578487623213116649503871348963086291090121132194306262070995109705539538000008869402966894933057821601958692723598201827384122175994529811585728974124104295733428673867761671345961704704766770069587683530400081798456337677918440893303424838955850202397155334659914701913224625386643156011571498705176434274346135086264358439897875710724119577193830819539267082010339965367194293064883650735739542790736709672328177446419935753094706115100204402545192136431549117485099267273329

# calculated sqrt of n, rounded down
sqrt_of_n = 138390145474559979704018959433486332171236693523257121207855763257601215111860353723054861659320614622191253495207107734543180548210017641587057951631900485980496061774438791272456448896948365869073759311971254087871345404407643977893681606530042245542049352120256210758480682257393112074792796566675809641926

q = sqrt_of_n
while True:
    q = next_prime(q)
    if is_safe_prime(q):
        break

print "q =", q
print "p =", p

